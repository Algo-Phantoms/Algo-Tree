/*
  Ciruclar Queue is a Data Structure which operates on the FIFO (First In First Out) Principle.
  The pointers to the first and last element are dynamic. 
                                
           First element -> O - O                   Last element -> O - O <- First element
                           /     \                                 /     \
           Last element -> O     O      may also be                O     O
                           \     /                                 \     /
                            O - O                                   O - O 
  
  
        O - O - O - O - O - O           may also be         O - O - O - O - O - O
        ^                   ^                               ^   ^
       first               last                           last first
  
  In a normal Queue, we can insert elements until queue becomes full. But once queue becomes full, 
  we can not insert the next element even if there is a space in front of queue. This is possible
  in Circular Queues and hence is a optimizes space consumption.
 */

import java.util.*;
public class CircularQueue
{
    int cq[];
    int first, last;

    CircularQueue(int size)
    { 
        //This is a default constructor to declare Circular Queue and global parameters first and last.
        cq = new int[size];
        first =-1;
        last = -1;
    }

    public void insert(int value)
    {
         // This function is used to insert an element into the circular queue. 
         // In a circular queue, the new element is always inserted at last position. 
         
        if(first == 0 && last == cq.length-1 || first == last+1)
        { 
            System.out.println("Overflow"); return;
        }
        else if(first == -1)
        {
            first=last=0;
        }
        else if(last == cq.length-1)
        {
            last=0;
        }
        else
        {
            last++;
        }
        cq[last]=value;
    }

    public int delete()
    {
        // This function is used to delete an element from the Circular Queue. 
        // In a circular queue, the element is always deleted from first position. 
         
        if(first == -1)
        {
            System.out.println("Underflow"); return 0; 
        }
        else
        {
            int temp = cq[first];
            if(first == last)
            { 
                reset(); 
            }
            else if(first == cq.length-1)
            {
                first=0;
            }
            else
            {
                first++;
            }
            return temp;
        }
    }

    private void display()
    {
        // This function is used to display a Circular Queue.
         
        if(first == -1)
        {
            System.out.print("Circular Queue is Empty");
            return;
        }
        
        for(int i = first; ; i++)
        {
            if(i == cq.length)
            {
                i=0;
            }

            System.out.print(cq[i] + " ");

            if(i == last)
            {
                break;
            }
        }
        System.out.println();
    }

    void reset()
    {
        // This function is used to reset first and last to original values -1.
        first=last=-1;
    }

    void main()
    {
        // This function serves as a driver code.
         
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter number of elements: ");
        int size = scanner.nextInt(); scanner.nextLine();

        CircularQueue ob = new CircularQueue(size);

        int flag=1;

        while(flag == 1)
        {
            System.out.println("Choose from following: ");
            System.out.println("1. Insert an element");
            System.out.println("2. Delete an element");
            System.out.println("3. Display the elements: ");
            System.out.println("Enter choice: ");
            int choice = scanner.nextInt(); scanner.nextLine();

            switch(choice)
            {
                case 1:
                System.out.println("Enter element: ");
                int value = scanner.nextInt(); scanner.nextLine();
                ob.insert(value);
                break;

                case 2:
                if(ob.delete()!=0)
                { 
                    System.out.println("Deleted element: "+ob.delete());
                }
                break;

                case 3:
                System.out.println("Displaying the queue");
                ob.display();
                break;
            }

            System.out.println("Do you wish to continue? Enter 1 for YES or 0 for NO: ");
            flag = scanner.nextInt(); scanner.nextLine();
        }
    }
}

/*
    Test Case:
    
    Enter number of elements: 
    5
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    1
    Enter element: 
    14
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    1
    Enter element: 
    50
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    1
    Enter element: 
    -10
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    1
    Enter element: 
    -78
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    1
    Enter element: 
    45
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    3
    Displaying the queue
    14 50 -10 -78 45 
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    1
    Enter element: 
    60
    Overflow
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    2
    Deleted element: 14
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    3
    Displaying the queue
    50 -10 -78 45 
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    1
    Enter element: 
    60
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    3
    Displaying the queue
    50 -10 -78 45 60 
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    2
    Deleted element: 50
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    2
    Deleted element: -10
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    2
    Deleted element: -78
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    2
    Deleted element: 45
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    2
    Deleted element: 60
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    2
    Underflow
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    1
    Choose from following: 
    1. Insert an element
    2. Delete an element
    3. Display the elements: 
    Enter choice: 
    3
    Circular Queue is Empty
    Do you wish to continue? Enter 1 for YES or 0 for NO: 
    0
*/
   
 /*
   Time Complexity:
   insert - O(1)
   delete - O(1)
   display - O(n)
   
   Space Complexity:
   O(n)
   
   where n is number of elements
 */
    
